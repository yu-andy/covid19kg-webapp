{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","width","height","chartType","data","options","title","colorAxis","colors","mapsApiKey","rootProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,wHCyG5BC,MApGf,WACI,OACA,yBAAKC,UAAU,OACX,kBAAC,IAAD,CACAC,MAAO,QACPC,OAAQ,QACRC,UAAU,WACVC,KAAM,CACF,CAAC,UAAW,WACZ,CAAC,QAAS,KACV,CAAC,gBAAiB,KAClB,CAAC,YAAa,KACd,CAAC,SAAU,KACX,CAAC,QAAS,KACV,CAAC,SAAU,KACX,CAAC,QAAS,IACV,CAAC,UAAW,IACZ,CAAC,SAAU,IACX,CAAC,SAAU,IACX,CAAC,QAAS,IACV,CAAC,cAAe,IAChB,CAAC,UAAW,IACZ,CAAC,SAAU,IACX,CAAC,UAAW,IACZ,CAAC,cAAe,IAChB,CAAC,QAAS,IACV,CAAC,SAAU,IACX,CAAC,eAAgB,IACjB,CAAC,QAAS,IACV,CAAC,iBAAkB,KACnB,CAAC,SAAU,IACX,CAAC,WAAY,IACb,CAAC,cAAe,IAChB,CAAC,SAAU,IACX,CAAC,SAAU,IACX,CAAC,SAAU,IACX,CAAC,OAAQ,IACT,CAAC,eAAgB,IACjB,CAAC,YAAa,IACd,CAAC,UAAW,IACZ,CAAC,WAAY,IACb,CAAC,QAAS,IACV,CAAC,WAAY,IACb,CAAC,SAAU,IACX,CAAC,QAAS,GACV,CAAC,cAAe,GAChB,CAAC,WAAY,GACb,CAAC,WAAY,GACb,CAAC,UAAW,GACZ,CAAC,QAAS,GACV,CAAC,YAAa,GACd,CAAC,YAAU,GACX,CAAC,OAAQ,GACT,CAAC,SAAU,GACX,CAAC,QAAS,GACV,CAAC,UAAW,GACZ,CAAC,UAAW,GACZ,CAAC,UAAW,GACZ,CAAC,mBAAoB,GACrB,CAAC,SAAU,GACX,CAAC,WAAY,GACb,CAAC,WAAY,GACb,CAAC,WAAY,GACb,CAAC,UAAW,GACZ,CAAC,WAAY,GACb,CAAC,SAAU,GACX,CAAC,YAAa,GACd,CAAC,UAAW,GACZ,CAAC,WAAY,GACb,CAAC,QAAS,GACV,CAAC,YAAa,GACd,CAAC,SAAU,GACX,CAAC,WAAY,GACb,CAAC,QAAS,GACV,CAAC,YAAa,GACd,CAAC,UAAW,GACZ,CAAC,uBAAwB,GACzB,CAAC,WAAY,GACb,CAAC,QAAS,GACV,CAAC,UAAW,GACZ,CAAC,cAAe,GAChB,CAAC,UAAW,GACZ,CAAC,WAAY,GACb,CAAC,aAAc,GACf,CAAC,WAAY,GACb,CAAC,YAAa,IAElBC,QAAS,CACLC,MAAO,8CACPC,UAAW,CAACC,OAAQ,CAAC,UAIzBC,WAAW,0CACXC,UAAW,CAAE,cAAe,SCvFhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf2ab2a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport Chart from \"react-google-charts\";\nimport './App.css';\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <Chart\n        width={'700px'}\n        height={'450px'}\n        chartType=\"GeoChart\"\n        data={[\n            ['Country', 'Authors'],\n            ['China', 484],\n            ['United States', 518],\n            ['Australia', 222],\n            ['France', 207],\n            ['Italy', 193],\n            ['Brazil', 166],\n            ['Spain', 97],\n            ['Finland', 74],\n            ['Canada', 62],\n            ['Taiwan', 72],\n            ['Japan', 93],\n            ['Netherlands', 81],\n            ['Belgium', 52],\n            ['Turkey', 46],\n            ['Germany', 45],\n            ['Switzerland', 41],\n            ['Chile', 41],\n            ['Mexico', 31],\n            ['South Africa', 29],\n            ['Gabon', 28],\n            ['United Kingdom', 145],\n            ['Greece', 20],\n            ['Thailand', 20],\n            ['South Korea', 61],\n            ['Poland', 14],\n            ['Sweden', 13],\n            ['Norway', 12],\n            ['Iran', 12],\n            ['Saudi Arabia', 11],\n            ['Singapore', 14],\n            ['Austria', 10],\n            ['Malaysia', 10],\n            ['Kenya', 10],\n            ['Scotland', 10],\n            ['Israel', 11],\n            ['India', 8],\n            ['New Zealand', 8],\n            ['Cambodia', 8],\n            ['Cameroon', 8],\n            ['Algeria', 8],\n            ['Niger', 8],\n            ['Argentina', 7],\n            ['MÃ©xico', 7],\n            ['Peru', 7],\n            ['LaoPDR', 7],\n            ['Qatar', 7],\n            ['Tunisia', 6],\n            ['Vietnam', 9],\n            ['Denmark', 6],\n            ['Papua New Guinea', 6],\n            ['Jordan', 6],\n            ['Colombia', 5],\n            ['Ethiopia', 5],\n            ['Slovenia', 5],\n            ['Ireland', 5],\n            ['Tanzania', 5],\n            ['Serbia', 5],\n            ['Sri Lanka', 4],\n            ['England', 4],\n            ['Portugal', 3],\n            ['Kenya', 3],\n            ['Nicaragua', 3],\n            ['Russia', 3],\n            ['Bulgaria', 2],\n            ['Egypt', 2],\n            ['Indonesia', 2],\n            ['Nigeria', 2],\n            ['United Arab Emirates', 1],\n            ['Cameroun', 1],\n            ['Nepal', 1],\n            ['Myanmar', 1],\n            ['Philippines', 1],\n            ['Croatia', 1],\n            ['Botswana', 1],\n            ['Costa Rica', 1],\n            ['Zimbabwe', 1],\n            ['Lithuania', 1],\n        ]}\n        options={{\n            title: 'Interactive Map for Distribution of Authors',\n            colorAxis: {colors: ['blue']}\n        }}\n        // Note: you will need to get a mapsApiKey for your project.\n        // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\n        mapsApiKey=\"AIzaSyCB1S5xoD0fdSzSX3BZR8jDAUuSwKMqn5w\"\n        rootProps={{ 'data-testid': '1' }}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}